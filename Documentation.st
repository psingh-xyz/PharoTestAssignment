Object subclass: #PackageDocGenerator	instanceVariableNames: 'package'	classVariableNames: ''	package: 'Documentation'!!PackageDocGenerator methodsFor: 'accessing' stamp: 'priyankasingh 1/11/2025 08:03'!generateDocumentation	"Generate documentation for all classes in the package"	| stream |	stream := WriteStream on: String new.	package ifNil: [ ^ 'No package selected' ].	stream		nextPutAll: '=== Package Documentation: ';		nextPutAll: package name greaseString;		nextPutAll: ' ===';		nextPut: Character cr;		nextPut: Character cr.	"Get all classes in the package and sort them by name"	(package definedClasses sorted: [ :a :b | a name <= b name ])		do: [ :class | 			self generateClassDoc: class on: stream.			stream				nextPutAll: '------------------------------------------------';				nextPut: Character cr;				nextPut: Character cr ].	^ stream contents! !!PackageDocGenerator methodsFor: 'accessing' stamp: 'priyankasingh 1/11/2025 08:02'!generateClassDoc: aClass on: aStream	"Class Header"	aStream		nextPutAll: '=== Class: ';		nextPutAll: aClass name greaseString;		nextPutAll: ' ===';		nextPut: Character cr;		nextPut: Character cr.	"Superclass"	aStream		nextPutAll: 'Superclass: ';		nextPutAll: aClass superclass name greaseString;		nextPut: Character cr;		nextPut: Character cr.	"Subclasses"	aStream		nextPutAll: 'Subclasses:';		nextPut: Character cr.	aClass subclasses		ifEmpty: [ aStream				nextPutAll: '(None)';				nextPut: Character cr ]		ifNotEmpty: [ aClass subclasses				do: [ :subclass | 					aStream						nextPutAll: '- ';						nextPutAll: subclass name greaseString;						nextPut: Character cr ] ].	aStream nextPut: Character cr.	"Instance Variables"	aStream		nextPutAll: 'Instance Variables:';		nextPut: Character cr.	aClass instVarNames		ifEmpty: [ aStream				nextPutAll: '(None)';				nextPut: Character cr ]		ifNotEmpty: [ aClass instVarNames				do: [ :var | 					aStream						nextPutAll: '- ';						nextPutAll: var greaseString;						nextPut: Character cr ] ].	aStream nextPut: Character cr.	"Methods"	aStream		nextPutAll: 'Methods:';		nextPut: Character cr.	(aClass selectors		sorted: [ :a :b | a greaseString <= b greaseString ])		do: [ :selector | 			| method |			method := aClass compiledMethodAt: selector.			aStream				nextPutAll: '* ';				nextPutAll: selector greaseString;				nextPut: Character cr.			method comment				ifNotNil: [ :arg | 					aStream						nextPutAll: '  Comment: ';						nextPutAll: method comment greaseString;						nextPut: Character cr ].			aStream nextPut: Character cr ].	aStream nextPut: Character cr! !!PackageDocGenerator methodsFor: 'initialization' stamp: 'priyankasingh 1/11/2025 07:18'!initialize    super initialize.    package := nil.! !!PackageDocGenerator methodsFor: 'initialization' stamp: 'priyankasingh 1/11/2025 07:19'!setPackage: aPackage    package := aPackage.! !